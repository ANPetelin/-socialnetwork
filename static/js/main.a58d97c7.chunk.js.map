{"version":3,"sources":["serviceWorker.js","redux/reducers/usersReducer.js","redux/reducers/postsReducer.js","redux/reducers/appReducer.js","redux/reducers/commentsReducer.js","redux/reducers/rootReducer.js","redux/types.js","components/Post.js","redux/actions.js","components/Posts.js","components/User.js","App.js","redux/sagas/requestData.js","redux/sagas/sagaComments.js","redux/sagas/sagaPosts.js","redux/sagas/sagaUsers.js","redux/sagas/rootSaga.js","redux/sagas/sagaWatcher.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","users","fetchedPost","loading","comments","rootReducer","combineReducers","state","action","type","payload","posts","app","oldComments","filter","postId","Panel","Collapse","props","dispatch","useDispatch","user","useSelector","id","post","userId","comment","useState","likes","setLikes","dislikes","setDislikes","setAction","actions","key","title","onClick","createElement","LikeFilled","LikeOutlined","className","React","DislikeFilled","DislikeOutlined","author","to","username","avatar","src","alt","content","body","accordion","expandIconPosition","onChange","header","map","email","name","datetime","moment","subtract","fromNow","Posts","useEffect","length","newPosts","i","index","Math","floor","random","tip","size","User","useParams","u","phone","href","website","address","city","street","suite","zipcode","company","catchPhrase","bs","Header","Layout","Footer","Content","App","exact","path","url","a","axios","get","call","requestData","put","data","alert","rootSaga","fork","sagaPosts","sagaComments","sagaUsers","sagaWatcher","takeEvery","saga","createSagaMiddleware","sagaMiddleware","applyMiddleware","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","compose","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a58d97c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_USERS } from \"../types\";\r\n\r\nconst initialState = {\r\n    users: []\r\n}\r\n\r\nexport const usersReducer = (state=initialState, action) => {    \r\n    switch(action.type) {                  \r\n        case FETCH_USERS:\r\n            return { ...state, users: action.payload };\r\n        default:\r\n            return state;\r\n    }    \r\n}","import { FETCH_POSTS } from \"../types\";\r\n\r\nconst initialState = {\r\n    fetchedPost: []\r\n}\r\n\r\nexport const postsReducer = (state=initialState, action) => {    \r\n    switch(action.type) {                   \r\n        case FETCH_POSTS:\r\n            return { ...state, fetchedPost: action.payload };\r\n        default:\r\n            return state;\r\n    }    \r\n}","import { SHOW_LOADER, HIDE_LOADER } from \"../types\"\r\n\r\nconst initialState = {\r\n    loading: false\r\n}\r\n\r\nexport const appReducer = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case SHOW_LOADER:\r\n            return {...state, loading: true};\r\n        case HIDE_LOADER:\r\n            return {...state, loading: false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import { FETCH_COMMENTS } from \"../types\";\r\n\r\nconst initialState = {\r\n    comments: []\r\n}\r\n\r\nexport const commentsReducer = (state=initialState, action) => {    \r\n    switch(action.type) {                  \r\n        case FETCH_COMMENTS:\r\n            let oldComments = state.comments.filter(comments => comments.postId !== action.payload[0].postId)     \r\n            return { ...state, comments: [...oldComments, ...action.payload] };\r\n        default:\r\n            return state;\r\n    }    \r\n}","import { combineReducers } from \"redux\";\r\nimport { usersReducer } from \"./usersReducer\";\r\nimport { postsReducer } from './postsReducer';\r\nimport { appReducer } from \"./appReducer\";\r\nimport { commentsReducer } from './commentsReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    users: usersReducer,\r\n    posts: postsReducer,\r\n    app: appReducer,\r\n    comments: commentsReducer\r\n})","export const FETCH_POSTS = 'POST/FETCH_POSTS';\r\nexport const FETCH_COMMENTS = 'POST/FETCH_COMMENTS';\r\nexport const REQUEST_POSTS = 'POST/REQUEST_POSTS';\r\nexport const REQUEST_COMMENTS = 'POST/REQUEST_COMMENTS';\r\nexport const REQUEST_USERS = 'REQUEST_USERS';\r\nexport const FETCH_USERS = 'FETCH_USERS';\r\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\r\nexport const HIDE_LOADER = 'APP/HIDE_LOADER';\r\n","import React, {createElement, useState} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Comment, Avatar, Collapse, Tooltip } from 'antd';\r\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { fetchComments } from '../redux/actions';\r\nimport './Post.scss';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nexport default (props) => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.users.users.filter(user => user.id === props.post.userId))[0];\r\n  const comments = useSelector(state => state.comments.comments.filter(comment => comment.postId === props.post.id));\r\n  const [likes, setLikes] = useState(0);\r\n  const [dislikes, setDislikes] = useState(0);\r\n  const [action, setAction] = useState(null);\r\n\r\n  const like = () => {\r\n    setLikes(1);\r\n    setDislikes(0);\r\n    setAction('liked');\r\n  };\r\n\r\n  const dislike = () => {\r\n    setLikes(0);\r\n    setDislikes(1);\r\n    setAction('disliked');\r\n  };\r\n\r\n  const actions = [\r\n    <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n        <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n    </Tooltip>,\r\n    <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n        <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n    </Tooltip>,\r\n    <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n  ];\r\n\r\n  return (\r\n    <div className = \"user__field\">\r\n        <Comment\r\n          actions={actions}\r\n          author={<Link to={'/socialnetwork/user/' + user.id}><p>{user.username}</p></Link>}\r\n          avatar={\r\n            <Link to={'/socialnetwork/user/' +user.id}><Avatar\r\n              src='./avatar.jpg'\r\n              alt={user.username} /></Link>\r\n          }    \r\n          content={\r\n          <p>{props.post.body}</p>\r\n          } />\r\n        <Collapse className=\"comments\" accordion expandIconPosition=\"right\" onChange={() => dispatch(fetchComments(props.post.id))}>          \r\n          <Panel header=\"Коментарии\" key={user.id}>\r\n          {comments.map(comment => <Comment\r\n              key={comment.id}\r\n              author={comment.email}\r\n              avatar={'./avatar.jpg'}\r\n              content={comment.name}\r\n              datetime={moment().subtract(1, 'days').fromNow()}\r\n            />)  \r\n          }</Panel>\r\n        </Collapse>\r\n</div>     \r\n  );\r\n};\r\n","import { SHOW_LOADER, HIDE_LOADER, REQUEST_POSTS, REQUEST_COMMENTS, REQUEST_USERS } from \"./types\";\r\n\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n\r\nexport function fetchPosts() {\r\n    return {\r\n        type: REQUEST_POSTS\r\n    }\r\n}\r\n\r\nexport function fetchComments(id) {\r\n    return {\r\n        type: REQUEST_COMMENTS,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport function fetchUsers() {\r\n    return {\r\n        type: REQUEST_USERS,\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Spin  } from 'antd';\r\nimport { fetchPosts, fetchUsers } from '../redux/actions';\r\nimport Post from './Post';\r\nimport './User.scss';\r\n\r\nconst Posts = () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector(state => state.posts.fetchedPost);\r\n  const users = useSelector(state => state.users.users);\r\n\r\n  useEffect(() => {\r\n    if(!posts.length) {\r\n      dispatch(fetchPosts());\r\n      dispatch(fetchUsers())\r\n    }\r\n  });\r\n  \r\n  let newPosts = [];\r\n  for( let i = 0; i < 10; i++) {\r\n    let index = Math.floor(Math.random() * 10) + i * 10;\r\n    newPosts = [...newPosts, posts[index]];\r\n  }\r\n\r\n  if (posts.length && users.length) {\r\n    return (\r\n      <div>\r\n        {newPosts.map(post => {\r\n            return <Post key = {post.id} post={post} />\r\n        })}\r\n      </div>    \r\n  );}  \r\n   else return <Spin className=\"spin\" tip=\"Loading...\" size=\"large\"/>\r\n};\r\n\r\nexport default Posts;\r\n","import React, {useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchPosts, fetchUsers } from '../redux/actions';\r\nimport { Card, Collapse, Spin } from 'antd';\r\nimport './User.scss';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst User = () => {    \r\n  \r\n  const dispatch = useDispatch();\r\n  const users = useSelector(state => state.users.users);\r\n  let { id } = useParams();\r\n  let user = users.filter(u => u.id === +id)[0];\r\n\r\n  useEffect(() => {\r\n    if (!users.length) {\r\n      dispatch(fetchPosts());\r\n      dispatch(fetchUsers())\r\n    }    \r\n  });\r\n\r\n  return (\r\n      <div>\r\n        {!users.length ? <Spin/> : \r\n        <Card title={user.name}>\r\n          <p>Псевдоним: {user.username}</p>\r\n          <p>Телефон: {user.phone}</p>\r\n          <p>Email: <a href={'mailto:' + user.email}>{user.email}</a></p>\r\n          <p>Website: <a href={`http://${user.website}`}>{user.website}</a></p>\r\n          <Collapse accordion expandIconPosition=\"right\">\r\n            <Panel header=\"Подробнее\" key={'1'}> \r\n              <p>Адрес проживания:</p>\r\n              <p>Город: {user.address.city}</p>\r\n              <p>Удица: {user.address.street}</p>\r\n              <p>Дом: {user.address.suite}</p>\r\n              <p>Почтовый индекс: {user.address.zipcode}</p><hr/>\r\n              <p>Место работы:</p>\r\n              <p>Название организации: {user.company.name}</p>\r\n              <p>Сфера дейтельности: {user.company.catchPhrase}</p>\r\n              <p>Должность: {user.company.bs}</p>\r\n            </Panel>\r\n            </Collapse>\r\n        </Card>}\r\n      </div>    \r\n  );\r\n};\r\n\r\nexport default User;\r\n\r\n\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Layout } from 'antd';\r\nimport Posts from './components/Posts';\r\nimport User from './components/User';\r\nimport './App.scss';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Header>\r\n        <p>Социальная сеть</p>\r\n      </Header>\r\n      <Content className=\"content\">\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/socialnetwork/\">\r\n              <Posts />\r\n            </Route>\r\n            <Route path=\"/socialnetwork/user/:id\">\r\n              <User />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </Content>\r\n      <Footer>однокашники</Footer>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","\r\nimport axios from 'axios';\r\n\r\nexport default async function (url) {\r\n    return axios.get(url);    \r\n}","import { put, call } from 'redux-saga/effects';\r\nimport { FETCH_COMMENTS, } from \"../types\";\r\nimport requestData from './requestData';\r\n\r\nexport default function* (post) { \r\n    try {\r\n        const payload = yield call(requestData, `https://jsonplaceholder.typicode.com/comments?postId=${post.id}`);  \r\n        yield put({type: FETCH_COMMENTS, payload: payload.data})\r\n    } \r\n    catch {\r\n        alert('Что то пошло не так');\r\n    }\r\n}","import { put, call } from 'redux-saga/effects';\r\nimport { showLoader, hideLoader } from '../actions';\r\nimport { FETCH_POSTS } from \"../types\";\r\nimport requestData from './requestData';\r\n\r\nexport default function* () {   \r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(requestData, 'https://jsonplaceholder.typicode.com/posts');    \r\n        yield put({type: FETCH_POSTS, payload: payload.data})\r\n        yield put(hideLoader());\r\n    } \r\n    catch {\r\n        alert('Что то пошло не так');\r\n    }\r\n}\r\n","import { put, call } from 'redux-saga/effects';\r\nimport { showLoader, hideLoader } from '../actions';\r\nimport { FETCH_USERS } from \"../types\";\r\nimport requestData from './requestData';\r\n\r\nexport default function* () {   \r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(requestData, 'https://jsonplaceholder.typicode.com/users');    \r\n        yield put({type: FETCH_USERS, payload: payload.data})\r\n        yield put(hideLoader());\r\n    } \r\n    catch {\r\n        alert('Что то пошло не так');\r\n    }\r\n}","import { fork } from 'redux-saga/effects';\r\nimport { REQUEST_POSTS, REQUEST_COMMENTS, REQUEST_USERS } from \"../types\";\r\nimport sagaComments from './sagaComments';\r\nimport sagaPosts from './sagaPosts';\r\nimport sagaUsers from './sagaUsers';\r\n\r\nexport default function* rootSaga(data) {\r\n    switch(data.type) {\r\n        case REQUEST_POSTS:\r\n            return yield fork(sagaPosts);\r\n        case REQUEST_COMMENTS:\r\n            return yield fork(sagaComments, data);\r\n        case REQUEST_USERS:\r\n            return yield fork(sagaUsers);\r\n        default:\r\n            return\r\n    }    \r\n}","import { takeEvery, } from 'redux-saga/effects';\r\nimport { REQUEST_POSTS, REQUEST_COMMENTS, REQUEST_USERS, } from \"../types\";\r\nimport rootSaga from './rootSaga';\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, rootSaga)\r\n    yield takeEvery(REQUEST_USERS, rootSaga)\r\n    yield takeEvery(REQUEST_COMMENTS, rootSaga)    \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport { rootReducer } from './redux/reducers/rootReducer';\nimport './index.scss';\nimport App from './App';\nimport createSagaMiddleware from 'redux-saga';\nimport { sagaWatcher } from './redux/sagas/sagaWatcher';\n\nconst saga = createSagaMiddleware();\n\nconst sagaMiddleware = applyMiddleware(saga);\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ \n  ? compose( sagaMiddleware, window.__REDUX_DEVTOOLS_EXTENSION__())\n  : sagaMiddleware);\n\nsaga.run(sagaWatcher);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}