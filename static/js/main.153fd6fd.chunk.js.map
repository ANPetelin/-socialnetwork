{"version":3,"sources":["serviceWorker.js","redux/usersReducer.js","redux/postsReducer.js","redux/appReducer.js","redux/commentsReducer.js","redux/rootReducer.js","redux/types.js","components/User/Posts.js","redux/actions.js","components/User/User.js","App.js","redux/sagas.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","users","fetchedPost","loading","comments","rootReducer","combineReducers","state","action","type","payload","posts","app","oldComments","filter","postId","Panel","Collapse","Post","props","dispatch","useDispatch","useSelector","comment","user","id","className","author","to","username","avatar","src","alt","content","post","body","accordion","onChange","header","key","map","email","name","datetime","moment","subtract","fromNow","Posts","useEffect","newPosts","i","index","Math","floor","random","length","u","userId","Users","useParams","title","style","width","phone","href","website","address","city","street","suite","zipcode","company","catchPhrase","bs","App","exact","path","sagaWatcher","sagaComments","sagaPosts","sagaUsers","takeEvery","call","axiosUrl","put","data","alert","url","a","axios","get","saga","createSagaMiddleware","sagaMiddleware","applyMiddleware","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","compose","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.153fd6fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_USERS } from \"./types\";\r\n\r\nconst initialState = {\r\n    users: []\r\n}\r\n\r\nexport const usersReducer = (state=initialState, action) => {    \r\n    switch(action.type) {                  \r\n        case FETCH_USERS:\r\n            return { ...state, users: action.payload };\r\n        default:\r\n            return state;\r\n    }    \r\n}","import { FETCH_POSTS } from \"./types\";\r\n\r\nconst initialState = {\r\n    fetchedPost: []\r\n}\r\n\r\nexport const postsReducer = (state=initialState, action) => {    \r\n    switch(action.type) {                   \r\n        case FETCH_POSTS:\r\n            return { ...state, fetchedPost: action.payload };\r\n        default:\r\n            return state;\r\n    }    \r\n}","import { SHOW_LOADER, HIDE_LOADER } from \"./types\"\r\n\r\nconst initialState = {\r\n    loading: false\r\n}\r\n\r\nexport const appReducer = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case SHOW_LOADER:\r\n            return {...state, loading: true};\r\n        case HIDE_LOADER:\r\n            return {...state, loading: false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import { FETCH_COMMENTS } from \"./types\";\r\n\r\nconst initialState = {\r\n    comments: []\r\n}\r\n\r\nexport const commentsReducer = (state=initialState, action) => {    \r\n    switch(action.type) {                  \r\n        case FETCH_COMMENTS:\r\n            let oldComments = state.comments.filter(comments => comments.postId !== action.payload[0].postId)            \r\n            return { ...state, comments: [...oldComments, ...action.payload] };\r\n        default:\r\n            return state;\r\n    }    \r\n}","import { combineReducers } from \"redux\";\r\nimport { usersReducer } from \"./usersReducer\";\r\nimport { postsReducer } from './postsReducer';\r\nimport { appReducer } from \"./appReducer\";\r\nimport { commentsReducer } from './commentsReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    users: usersReducer,\r\n    posts: postsReducer,\r\n    app: appReducer,\r\n    comments: commentsReducer\r\n})","export const FETCH_POSTS = 'POST/FETCH_POSTS';\r\nexport const FETCH_COMMENTS = 'POST/FETCH_COMMENTS';\r\nexport const REQUEST_POSTS = 'POST/REQUEST_POSTS';\r\nexport const REQUEST_COMMENTS = 'POST/REQUEST_COMMENTS';\r\nexport const REQUEST_USERS = 'REQUEST_USERS';\r\nexport const FETCH_USERS = 'FETCH_USERS';\r\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\r\nexport const HIDE_LOADER = 'APP/HIDE_LOADER';\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Comment, Avatar, Collapse, Spin  } from 'antd';\r\nimport moment from 'moment';\r\nimport { fetchComments, fetchPosts, fetchUsers } from '../../redux/actions';\r\nimport './User.scss';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst Posts = () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector(state => state.posts.fetchedPost);\r\n  const users = useSelector(state => state.users.users);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts());\r\n    dispatch(fetchUsers())\r\n  },[dispatch]);\r\n  \r\n  let newPosts = [];\r\n  for( let i = 0; i < 10; i++) {\r\n    let index = Math.floor(Math.random() * 10) + i * 10;\r\n    newPosts = [...newPosts, posts[index]];\r\n  }\r\n\r\n  if (posts.length && users.length) {\r\n    return (\r\n      <div>\r\n        {newPosts.map(post => {\r\n            let user = users.filter(u => u.id === post.userId);\r\n            return <div key = {post.id}>\r\n                <Post user = {user[0]} post={post} />\r\n          </div>})}\r\n      </div>    \r\n  );}  \r\n\r\n  else return <Spin/>\r\n};\r\n\r\nconst Post = (props) => {\r\n  const dispatch = useDispatch();\r\n  const comments = useSelector(state => state.comments.comments.filter(comment => comment.postId === props.user.id));\r\n\r\n  return (\r\n    <div className = \"user__field\">\r\n        <Comment\r\n          author={<Link to={'/user/' + props.user.id}><p>{props.user.username}</p></Link>}\r\n          avatar={\r\n            <Link to={'/user/' + props.user.id}><Avatar\r\n              src='./avatar.jpg'\r\n              alt={props.user.username} /></Link>\r\n          }    \r\n          content={\r\n          <p>{props.post.body}</p>\r\n          } />\r\n        <Collapse accordion onChange={() => dispatch(fetchComments(props.user.id))}>          \r\n          <Panel header=\"Коментарии\" key={props.user.id}>\r\n          {comments.map(comment => <Comment\r\n              key={comment.id}\r\n              author={comment.email}\r\n              avatar={'./avatar.jpg'}\r\n              content={comment.name}\r\n              datetime={moment().subtract(1, 'days').fromNow()}\r\n            />)  \r\n          }</Panel>\r\n        </Collapse>\r\n</div>     \r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Posts;\r\n\r\n","import { SHOW_LOADER, HIDE_LOADER, REQUEST_POSTS, REQUEST_COMMENTS, REQUEST_USERS } from \"./types\";\r\n\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n\r\nexport function fetchPosts() {\r\n    return {\r\n        type: REQUEST_POSTS\r\n    }\r\n}\r\n\r\nexport function fetchComments(id) {\r\n    return {\r\n        type: REQUEST_COMMENTS,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport function fetchUsers() {\r\n    return {\r\n        type: REQUEST_USERS,\r\n    }\r\n}","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card, Collapse } from 'antd';\r\nimport './User.scss';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst Users = () => {    \r\n  const users = useSelector(state => state.users.users);\r\n  let { id } = useParams();\r\n  let user = users.filter(u => u.id === +id)[0];\r\n  return (\r\n      <div className = \"user__field\">\r\n        {!users.length ? <h1>Вы не выбрали пользователя, перейдите на основную страницу</h1> : \r\n        <Card title={user.name} style={{ width: 600 }}>\r\n          <p>Псевдоним: {user.username}</p>\r\n          <p>Телефон: {user.phone}</p>\r\n          <p>Email: <a href={'mailto:' + user.email}>{user.email}</a></p>\r\n          <p>Website: <a href={`http://${user.website}`}>{user.website}</a></p>\r\n          <Collapse accordion>\r\n            <Panel header=\"Подробнее\" key={'1'}> \r\n              <p>Адрес проживания:</p>\r\n              <p>Город: {user.address.city}</p>\r\n              <p>Удица: {user.address.street}</p>\r\n              <p>Дом: {user.address.suite}</p>\r\n              <p>Почтовый индекс: {user.address.zipcode}</p><hr/>\r\n              <p>Место работы:</p>\r\n              <p>Название организации: {user.company.name}</p>\r\n              <p>Сфера дейтельности: {user.company.catchPhrase}</p>\r\n              <p>Должность: {user.company.bs}</p>\r\n            </Panel>\r\n            </Collapse>\r\n        </Card>}\r\n      </div>    \r\n  );\r\n};\r\n\r\nexport default Users;\r\n\r\n\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Posts from './components/User/Posts';\nimport User from './components/User/User';\nimport './App.scss';\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>          \n            <Route exact path=\"/socialnetwork/\">\n              <Posts/>\n            </Route>   \n            <Route path=\"/socialnetwork/user/:id\">\n              <User />\n            </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n","import {takeEvery, put, call} from 'redux-saga/effects';\r\nimport { showLoader, hideLoader } from './actions';\r\nimport { REQUEST_POSTS, FETCH_POSTS, REQUEST_COMMENTS, FETCH_COMMENTS, REQUEST_USERS, FETCH_USERS } from \"./types\";\r\nimport axios from 'axios';\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, sagaPosts)\r\n    yield takeEvery(REQUEST_USERS, sagaUsers)\r\n    yield takeEvery(REQUEST_COMMENTS, sagaComments)    \r\n}\r\n\r\nfunction* sagaComments(post) { \r\n    try {\r\n        const payload = yield call(axiosUrl, `https://jsonplaceholder.typicode.com/comments?postId=${post.id}`);  \r\n        yield put({type: FETCH_COMMENTS, payload: payload.data})\r\n    } \r\n    catch {\r\n        alert('Что то пошло не так');\r\n    }\r\n}\r\n\r\nfunction* sagaPosts() {   \r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(axiosUrl, 'https://jsonplaceholder.typicode.com/posts');    \r\n        yield put({type: FETCH_POSTS, payload: payload.data})\r\n        yield put(hideLoader());\r\n    } \r\n    catch {\r\n        alert('Что то пошло не так');\r\n    }\r\n}\r\n\r\nfunction* sagaUsers() {   \r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(axiosUrl, 'https://jsonplaceholder.typicode.com/users');    \r\n        yield put({type: FETCH_USERS, payload: payload.data})\r\n        yield put(hideLoader());\r\n    } \r\n    catch {\r\n        alert('Что то пошло не так');\r\n    }\r\n}\r\n\r\nasync function axiosUrl (url) {\r\n    return axios.get(url);    \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport { rootReducer } from './redux/rootReducer';\nimport './index.scss';\nimport App from './App';\nimport createSagaMiddleware from 'redux-saga';\nimport { sagaWatcher } from './redux/sagas';\n\nconst saga = createSagaMiddleware();\n\nconst sagaMiddleware = applyMiddleware(saga);\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ \n  ? compose( sagaMiddleware, window.__REDUX_DEVTOOLS_EXTENSION__())\n  : sagaMiddleware);\n\nsaga.run(sagaWatcher);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}